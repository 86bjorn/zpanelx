#!/usr/bin/php
<?php
/**
 * ZPPY - The ZPanel Package Manager Tool.
 * @package zpanelx
 * @subpackage core -> zppy client
 * @author Bobby Allen (ballen@zpanelcp.com)
 * @copyright ZPanel Project (http://www.zpanelcp.com/)
 * @link http://www.zpanelcp.com/
 * @license GPL (http://www.gnu.org/licenses/gpl.html)
 */
$raw_path = str_replace("\\", "/", dirname(__FILE__));
$root_path = str_replace("/bin", "/", $raw_path);
chdir($root_path);

set_time_limit(0);
ini_set('memory_limit', '256M');
ini_set('error_reporting', E_ALL | E_STRICT);
ini_set('display_errors', 'On');
ini_set('log_errors', 'Off');

require_once 'dryden/loader.inc.php';
require_once 'cnf/db.php';
require_once 'inc/dbc.inc.php';

$repo_file = "etc/zppy-cache/repo.list";
$package_file = "etc/zppy-cache/package.list";

if (!runtime_controller::IsCLI())
    exit;


if ((isset($argv[1])) && ($argv[1] == 'install')) {
    fwrite(STDOUT, "Module to be installed " . $argv[2] . "\n");
    $zip = new ZipArchive;
    $res = $zip->open("/tmp/" . $argv[2] . ".zip");
    if ($res) {
        $zip->extractTo("/tmp/");
        $zip->close();
        fwrite(STDOUT, "Module extracted successfully!");
    } else {
        fwrite(STDOUT, "Module failed to be extracted!");
    }
    exit;
}


if ((isset($argv[1])) && ($argv[1] == 'upgrade')) {
    fwrite(STDOUT, "Module to be upgraded!\n");

    exit;
}


if ((isset($argv[1])) && ($argv[1] == 'remove')) {
    if (fs_director::CheckFolderExists('modules/' . $argv[2])) {
        fwrite(STDOUT, "Removing \"" . $argv[2] . "\" will delete the module folder and drop any tables used by the module!\n");
        fwrite(STDOUT, "Please confirm you want to remove this module? [y/N]");
        $confirm = fgets(STDIN, 2);
        if ($confirm == 'y') {
            fwrite(STDOUT, "Deleting " . $argv[2] . " modules files..\n");
            // Lets delete the actual module files and the module folder itself.
            // Lets clean up the module group permissions too... Lets drop them all!
            // Lets drop any system options from the system options table that are related to this module!
            // Lets drop the module from the modules table
        } else {
            fwrite(STDOUT, "Cancelled module removal!\n");
        }
    } else {
        fwrite(STDOUT, "The module '" . $argv[2] . "' doesn't appear to be installed!\n");
    }
    exit;
}


if ((isset($argv[1])) && (($argv[1] == 'version') || ($argv[1] == '-v') || ($argv[1] == '--version'))) {
    fwrite(STDOUT, "Version: " . ctrl_options::GetOption('dbversion') . "\n");
    exit;
}


if (isset($argv[1]) && ($argv[1] == 'checkperms')) {
    $checks = 0;
    fwrite(STDOUT, "Checking file permissions:\n");
    if (!is_writable($repo_file)) {
        fwrite(STDOUT, "repo.list if not writable!\n");
        $checks++;
    }
    if (!is_writable($package_file)) {
        fwrite(STDOUT, "package.list if not writable!\n");
        $checks++;
    }
    if ($checks == 0) {
        fwrite(STDOUT, "All good!\n");
    }
}


if ((isset($argv[1])) && ($argv[1] == 'repo')) {
    if ((isset($argv[2])) && ($argv[2] == 'add')) {
        if ($argv[3]) {
            $handle = fopen($repo_file, "r+");
            $contents = fread($handle, filesize($repo_file));
            $newrepo = "" . $argv[3] . "\n";
            fwrite($handle, $newrepo);
            fclose($handle);
            fwrite(STDOUT, "Added '" . $argv[3] . "' to list of repositories! Remember to execute 'zppy update' to grab the latest list of packages.");
        }
    }


    if ((isset($argv[2])) && ($argv[2] == 'remove')) {
        $contents = file_get_contents($repo_file);
        $lines = preg_split('/\r\n|\r|\n/', $contents);
        $newconf = "";
        foreach ($lines as $line) {
            if (($line != $argv[3]) || ($line != '')) {
                $newconf .= $line . "\n";
            }
        }
        $handle = fopen($repo_file, "w");
        fwrite($handle, $newconf);
        fclose($handle);
        fwrite(STDOUT, "Removed '" . $argv[3] . "' from the list of repositories! Remember to execute 'zppy update' to grab the latest list of packages.");
    }


    if ((isset($argv[2])) && ($argv[2] == 'list')) {
        $handle = fopen($repo_file, "r+");
        $contents = fread($handle, filesize($repo_file));
        $lines = preg_split('/\r\n|\r|\n/', $contents);
        fwrite(STDOUT, "\nCurrently configured repositories:\n\n");
        foreach ($lines as $line) {
            if (isset($line[0]) && ($line[0] == "#")) {
                # Its a comment - lets ignore it.
            } else {
                if ($line != "") {
                    fwrite(STDOUT, " > " . $line . "\n");
                }
            }
        }
    }
}

if ((isset($argv[1])) && ($argv[1] == 'update')) {
    $raw_repos = file_get_contents($repo_file);
    $lines = preg_split('/\r\n|\r|\n/', $raw_repos);
    $handle = fopen($package_file, "w+");
    fwrite($handle, "");
    fclose($handle);
    foreach ($lines as $line) {
        if ((isset($line[0])) && (($line[0] == "#") || ($line == ""))) {
            # Its a comment or empty line - lets ignore it.
        } else {
            echo "Connecting to " . $line . "<br>";
            $packagects = @file_get_contents($line . "packages.txt");
            echo "Generating package list from " . $line . "<br>";
            if ($packagects) {
                $currconf = file_get_contents($package_file);
                $plines = preg_split('/\r\n|\r|\n/', $packagects);
                $newconf = "";
                foreach ($plines as $pline) {
                    if (substr($line, 1, 1) != "#") {
                        $newconf .= $pline . "\t" . $line . "\n";
                    }
                }
                $handle = fopen($package_file, "w");
                fwrite($handle, $currconf . $newconf);
                fclose($handle);
            } else {
                #echo "Sorry, couldn't contact the URL!";
            }
        }
    }
}


if ((!isset($argv[1])) || ($argv[1] == 'help') || ($argv[1] == '-h') || ($argv[1] == '--help')) {
    fwrite(STDOUT, "\nZPanel Package Manager\n");
    fwrite(STDOUT, "Copyright (c) 2008 - 2012 ZPanel Project\n");
    fwrite(STDOUT, "http://www.zpanelcp.com/\n");
    fwrite(STDOUT, "Usage: zppy [action] [modulename]\n");
    fwrite(STDOUT, "Actions:\n");
    fwrite(STDOUT, "  install [modulename]- Install a named module.\n");
    fwrite(STDOUT, "  upgrade [modulename]- Updates a named module.\n");
    fwrite(STDOUT, "  remove [modulename]- Remove a named module.\n");
    fwrite(STDOUT, "  --version - Displays the Zpanel version\n");
    fwrite(STDOUT, "  --help - Displays this text.\n\n");
}

exit;
?>